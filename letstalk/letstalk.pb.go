// Code generated by protoc-gen-go. DO NOT EDIT.
// source: letstalk.proto

/*
Package letstalk is a generated protocol buffer package.

It is generated from these files:
	letstalk.proto

It has these top-level messages:
	SignupRequest
	SignupReply
*/
package letstalk

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignupRequest struct {
	Email     string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password1 string `protobuf:"bytes,2,opt,name=password1" json:"password1,omitempty"`
	Firstname string `protobuf:"bytes,3,opt,name=firstname" json:"firstname,omitempty"`
	Lastname  string `protobuf:"bytes,4,opt,name=lastname" json:"lastname,omitempty"`
}

func (m *SignupRequest) Reset()                    { *m = SignupRequest{} }
func (m *SignupRequest) String() string            { return proto.CompactTextString(m) }
func (*SignupRequest) ProtoMessage()               {}
func (*SignupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SignupRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SignupRequest) GetPassword1() string {
	if m != nil {
		return m.Password1
	}
	return ""
}

func (m *SignupRequest) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *SignupRequest) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

type SignupReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *SignupReply) Reset()                    { *m = SignupReply{} }
func (m *SignupReply) String() string            { return proto.CompactTextString(m) }
func (*SignupReply) ProtoMessage()               {}
func (*SignupReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignupReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SignupRequest)(nil), "letstalk.SignupRequest")
	proto.RegisterType((*SignupReply)(nil), "letstalk.SignupReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Signup service

type SignupClient interface {
	// Sends a signup request
	SendSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupReply, error)
}

type signupClient struct {
	cc *grpc.ClientConn
}

func NewSignupClient(cc *grpc.ClientConn) SignupClient {
	return &signupClient{cc}
}

func (c *signupClient) SendSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupReply, error) {
	out := new(SignupReply)
	err := grpc.Invoke(ctx, "/letstalk.Signup/SendSignup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signup service

type SignupServer interface {
	// Sends a signup request
	SendSignup(context.Context, *SignupRequest) (*SignupReply, error)
}

func RegisterSignupServer(s *grpc.Server, srv SignupServer) {
	s.RegisterService(&_Signup_serviceDesc, srv)
}

func _Signup_SendSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServer).SendSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Signup/SendSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServer).SendSignup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "letstalk.Signup",
	HandlerType: (*SignupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSignup",
			Handler:    _Signup_SendSignup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "letstalk.proto",
}

func init() { proto.RegisterFile("letstalk.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x49, 0x2d, 0x29,
	0x2e, 0x49, 0xcc, 0xc9, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x6a,
	0xb9, 0x78, 0x83, 0x33, 0xd3, 0xf3, 0x4a, 0x0b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x44, 0xb8, 0x58, 0x53, 0x73, 0x13, 0x33, 0x73, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20,
	0x1c, 0x21, 0x19, 0x2e, 0xce, 0x82, 0xc4, 0xe2, 0xe2, 0xf2, 0xfc, 0xa2, 0x14, 0x43, 0x09, 0x26,
	0xb0, 0x0c, 0x42, 0x00, 0x24, 0x9b, 0x96, 0x59, 0x54, 0x5c, 0x92, 0x97, 0x98, 0x9b, 0x2a, 0xc1,
	0x0c, 0x91, 0x85, 0x0b, 0x08, 0x49, 0x71, 0x71, 0xe4, 0x24, 0x42, 0x25, 0x59, 0xc0, 0x92, 0x70,
	0xbe, 0x92, 0x3a, 0x17, 0x37, 0xcc, 0xfa, 0x82, 0x9c, 0x4a, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4,
	0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0xa8, 0xf5, 0x30, 0xae, 0x91, 0x07, 0x17, 0x1b, 0x44, 0xa1, 0x90,
	0x1d, 0x17, 0x57, 0x70, 0x6a, 0x5e, 0x0a, 0x94, 0x27, 0xae, 0x07, 0xf7, 0x1a, 0x8a, 0x3f, 0xa4,
	0x44, 0x31, 0x25, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x41, 0x60, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x4f, 0x9e, 0xa4, 0x02, 0x14, 0x01, 0x00, 0x00,
}
