// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package letstalk is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	Talk
	SignupRequest
	SignupReply
	LoginRequest
	LoginReply
	LogoutRequest
	LogoutReply
	CancelRequest
	CancelReply
	FollowRequest
	FollowReply
	FollowUserRequest
	FollowUserReply
	UnfollowUserRequest
	UnfollowUserReply
	TalkRequest
	TalkReply
	GetUsers
	GetTalks
	Node
	JoinReply
	PrepareArgs
	PrepareReply
	RecoveryArgs
	RecoveryReply
	UserData
	ViewChangeArgs
	ViewChangeReply
	StartViewArgs
	StartViewReply
	WhoisPrimaryRequest
	WhoIsPrimaryResponse
	HeartBeatRequest
	HeartBeatResponse
*/
package letstalk

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Email     string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password1 string `protobuf:"bytes,2,opt,name=password1" json:"password1,omitempty"`
	Firstname string `protobuf:"bytes,3,opt,name=firstname" json:"firstname,omitempty"`
	Lastname  string `protobuf:"bytes,4,opt,name=lastname" json:"lastname,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword1() string {
	if m != nil {
		return m.Password1
	}
	return ""
}

func (m *User) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *User) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

type Talk struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Talk  string `protobuf:"bytes,2,opt,name=talk" json:"talk,omitempty"`
	Date  string `protobuf:"bytes,3,opt,name=date" json:"date,omitempty"`
}

func (m *Talk) Reset()                    { *m = Talk{} }
func (m *Talk) String() string            { return proto.CompactTextString(m) }
func (*Talk) ProtoMessage()               {}
func (*Talk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Talk) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Talk) GetTalk() string {
	if m != nil {
		return m.Talk
	}
	return ""
}

func (m *Talk) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type SignupRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *SignupRequest) Reset()                    { *m = SignupRequest{} }
func (m *SignupRequest) String() string            { return proto.CompactTextString(m) }
func (*SignupRequest) ProtoMessage()               {}
func (*SignupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SignupRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type SignupReply struct {
	Message   string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Sessionid string `protobuf:"bytes,2,opt,name=sessionid" json:"sessionid,omitempty"`
}

func (m *SignupReply) Reset()                    { *m = SignupReply{} }
func (m *SignupReply) String() string            { return proto.CompactTextString(m) }
func (*SignupReply) ProtoMessage()               {}
func (*SignupReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SignupReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SignupReply) GetSessionid() string {
	if m != nil {
		return m.Sessionid
	}
	return ""
}

type LoginRequest struct {
	Email     string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password1 string `protobuf:"bytes,2,opt,name=password1" json:"password1,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword1() string {
	if m != nil {
		return m.Password1
	}
	return ""
}

type LoginReply struct {
	Message   string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoginReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LoginReply) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type LogoutRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LogoutRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type LogoutReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *LogoutReply) Reset()                    { *m = LogoutReply{} }
func (m *LogoutReply) String() string            { return proto.CompactTextString(m) }
func (*LogoutReply) ProtoMessage()               {}
func (*LogoutReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LogoutReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CancelRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *CancelRequest) Reset()                    { *m = CancelRequest{} }
func (m *CancelRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelRequest) ProtoMessage()               {}
func (*CancelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CancelRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type CancelReply struct {
	Message string  `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Talk    []*Talk `protobuf:"bytes,2,rep,name=talk" json:"talk,omitempty"`
}

func (m *CancelReply) Reset()                    { *m = CancelReply{} }
func (m *CancelReply) String() string            { return proto.CompactTextString(m) }
func (*CancelReply) ProtoMessage()               {}
func (*CancelReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CancelReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CancelReply) GetTalk() []*Talk {
	if m != nil {
		return m.Talk
	}
	return nil
}

type FollowRequest struct {
	Username string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Email    []string `protobuf:"bytes,2,rep,name=email" json:"email,omitempty"`
}

func (m *FollowRequest) Reset()                    { *m = FollowRequest{} }
func (m *FollowRequest) String() string            { return proto.CompactTextString(m) }
func (*FollowRequest) ProtoMessage()               {}
func (*FollowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FollowRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FollowRequest) GetEmail() []string {
	if m != nil {
		return m.Email
	}
	return nil
}

type FollowReply struct {
	Message  string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Userlist []string `protobuf:"bytes,2,rep,name=userlist" json:"userlist,omitempty"`
}

func (m *FollowReply) Reset()                    { *m = FollowReply{} }
func (m *FollowReply) String() string            { return proto.CompactTextString(m) }
func (*FollowReply) ProtoMessage()               {}
func (*FollowReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FollowReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FollowReply) GetUserlist() []string {
	if m != nil {
		return m.Userlist
	}
	return nil
}

type FollowUserRequest struct {
	Username string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Email    []string `protobuf:"bytes,2,rep,name=email" json:"email,omitempty"`
}

func (m *FollowUserRequest) Reset()                    { *m = FollowUserRequest{} }
func (m *FollowUserRequest) String() string            { return proto.CompactTextString(m) }
func (*FollowUserRequest) ProtoMessage()               {}
func (*FollowUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FollowUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FollowUserRequest) GetEmail() []string {
	if m != nil {
		return m.Email
	}
	return nil
}

type FollowUserReply struct {
	Username string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Talk     []*Talk `protobuf:"bytes,2,rep,name=talk" json:"talk,omitempty"`
}

func (m *FollowUserReply) Reset()                    { *m = FollowUserReply{} }
func (m *FollowUserReply) String() string            { return proto.CompactTextString(m) }
func (*FollowUserReply) ProtoMessage()               {}
func (*FollowUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FollowUserReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FollowUserReply) GetTalk() []*Talk {
	if m != nil {
		return m.Talk
	}
	return nil
}

type UnfollowUserRequest struct {
	Username string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Email    []string `protobuf:"bytes,2,rep,name=email" json:"email,omitempty"`
}

func (m *UnfollowUserRequest) Reset()                    { *m = UnfollowUserRequest{} }
func (m *UnfollowUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UnfollowUserRequest) ProtoMessage()               {}
func (*UnfollowUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UnfollowUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UnfollowUserRequest) GetEmail() []string {
	if m != nil {
		return m.Email
	}
	return nil
}

type UnfollowUserReply struct {
	Username string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Talk     []*Talk `protobuf:"bytes,2,rep,name=talk" json:"talk,omitempty"`
}

func (m *UnfollowUserReply) Reset()                    { *m = UnfollowUserReply{} }
func (m *UnfollowUserReply) String() string            { return proto.CompactTextString(m) }
func (*UnfollowUserReply) ProtoMessage()               {}
func (*UnfollowUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UnfollowUserReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UnfollowUserReply) GetTalk() []*Talk {
	if m != nil {
		return m.Talk
	}
	return nil
}

type TalkRequest struct {
	Talk    *Talk  `protobuf:"bytes,1,opt,name=talk" json:"talk,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *TalkRequest) Reset()                    { *m = TalkRequest{} }
func (m *TalkRequest) String() string            { return proto.CompactTextString(m) }
func (*TalkRequest) ProtoMessage()               {}
func (*TalkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *TalkRequest) GetTalk() *Talk {
	if m != nil {
		return m.Talk
	}
	return nil
}

func (m *TalkRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TalkReply struct {
	Message string  `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Talk    []*Talk `protobuf:"bytes,2,rep,name=talk" json:"talk,omitempty"`
}

func (m *TalkReply) Reset()                    { *m = TalkReply{} }
func (m *TalkReply) String() string            { return proto.CompactTextString(m) }
func (*TalkReply) ProtoMessage()               {}
func (*TalkReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TalkReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TalkReply) GetTalk() []*Talk {
	if m != nil {
		return m.Talk
	}
	return nil
}

type GetUsers struct {
	User []*User `protobuf:"bytes,1,rep,name=user" json:"user,omitempty"`
}

func (m *GetUsers) Reset()                    { *m = GetUsers{} }
func (m *GetUsers) String() string            { return proto.CompactTextString(m) }
func (*GetUsers) ProtoMessage()               {}
func (*GetUsers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetUsers) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetTalks struct {
	Talk []*Talk `protobuf:"bytes,1,rep,name=talk" json:"talk,omitempty"`
}

func (m *GetTalks) Reset()                    { *m = GetTalks{} }
func (m *GetTalks) String() string            { return proto.CompactTextString(m) }
func (*GetTalks) ProtoMessage()               {}
func (*GetTalks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetTalks) GetTalk() []*Talk {
	if m != nil {
		return m.Talk
	}
	return nil
}

type Node struct {
	Id          int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Port        int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	CurrentView int32 `protobuf:"varint,3,opt,name=currentView" json:"currentView,omitempty"`
	CommitIndex int32 `protobuf:"varint,4,opt,name=commitIndex" json:"commitIndex,omitempty"`
	Status      int32 `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Node) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Node) GetCurrentView() int32 {
	if m != nil {
		return m.CurrentView
	}
	return 0
}

func (m *Node) GetCommitIndex() int32 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

func (m *Node) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type JoinReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *JoinReply) Reset()                    { *m = JoinReply{} }
func (m *JoinReply) String() string            { return proto.CompactTextString(m) }
func (*JoinReply) ProtoMessage()               {}
func (*JoinReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *JoinReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PrepareArgs struct {
	View          int32  `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	PrimaryCommit int32  `protobuf:"varint,2,opt,name=PrimaryCommit" json:"PrimaryCommit,omitempty"`
	Index         int32  `protobuf:"varint,3,opt,name=Index" json:"Index,omitempty"`
	Entry         string `protobuf:"bytes,4,opt,name=Entry" json:"Entry,omitempty"`
}

func (m *PrepareArgs) Reset()                    { *m = PrepareArgs{} }
func (m *PrepareArgs) String() string            { return proto.CompactTextString(m) }
func (*PrepareArgs) ProtoMessage()               {}
func (*PrepareArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PrepareArgs) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrepareArgs) GetPrimaryCommit() int32 {
	if m != nil {
		return m.PrimaryCommit
	}
	return 0
}

func (m *PrepareArgs) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PrepareArgs) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

type PrepareReply struct {
	View    int32 `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
}

func (m *PrepareReply) Reset()                    { *m = PrepareReply{} }
func (m *PrepareReply) String() string            { return proto.CompactTextString(m) }
func (*PrepareReply) ProtoMessage()               {}
func (*PrepareReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PrepareReply) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrepareReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RecoveryArgs struct {
	View   int32 `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	Server int32 `protobuf:"varint,2,opt,name=Server" json:"Server,omitempty"`
}

func (m *RecoveryArgs) Reset()                    { *m = RecoveryArgs{} }
func (m *RecoveryArgs) String() string            { return proto.CompactTextString(m) }
func (*RecoveryArgs) ProtoMessage()               {}
func (*RecoveryArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RecoveryArgs) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RecoveryArgs) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

type RecoveryReply struct {
	View          int32       `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	Entries       []string    `protobuf:"bytes,2,rep,name=Entries" json:"Entries,omitempty"`
	PrimaryCommit int32       `protobuf:"varint,3,opt,name=PrimaryCommit" json:"PrimaryCommit,omitempty"`
	Success       bool        `protobuf:"varint,4,opt,name=Success" json:"Success,omitempty"`
	Data          []*UserData `protobuf:"bytes,5,rep,name=Data" json:"Data,omitempty"`
}

func (m *RecoveryReply) Reset()                    { *m = RecoveryReply{} }
func (m *RecoveryReply) String() string            { return proto.CompactTextString(m) }
func (*RecoveryReply) ProtoMessage()               {}
func (*RecoveryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *RecoveryReply) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RecoveryReply) GetEntries() []string {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *RecoveryReply) GetPrimaryCommit() int32 {
	if m != nil {
		return m.PrimaryCommit
	}
	return 0
}

func (m *RecoveryReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RecoveryReply) GetData() []*UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserData struct {
	Username  string  `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	Password  string  `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
	TweetList []*Talk `protobuf:"bytes,3,rep,name=TweetList" json:"TweetList,omitempty"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (m *UserData) String() string            { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UserData) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserData) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserData) GetTweetList() []*Talk {
	if m != nil {
		return m.TweetList
	}
	return nil
}

type ViewChangeArgs struct {
	View int32 `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
}

func (m *ViewChangeArgs) Reset()                    { *m = ViewChangeArgs{} }
func (m *ViewChangeArgs) String() string            { return proto.CompactTextString(m) }
func (*ViewChangeArgs) ProtoMessage()               {}
func (*ViewChangeArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ViewChangeArgs) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

type ViewChangeReply struct {
	LastNormalView int32    `protobuf:"varint,1,opt,name=LastNormalView" json:"LastNormalView,omitempty"`
	Log            []string `protobuf:"bytes,2,rep,name=Log" json:"Log,omitempty"`
	Success        bool     `protobuf:"varint,3,opt,name=Success" json:"Success,omitempty"`
}

func (m *ViewChangeReply) Reset()                    { *m = ViewChangeReply{} }
func (m *ViewChangeReply) String() string            { return proto.CompactTextString(m) }
func (*ViewChangeReply) ProtoMessage()               {}
func (*ViewChangeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ViewChangeReply) GetLastNormalView() int32 {
	if m != nil {
		return m.LastNormalView
	}
	return 0
}

func (m *ViewChangeReply) GetLog() []string {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *ViewChangeReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type StartViewArgs struct {
	View int32    `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	Log  []string `protobuf:"bytes,2,rep,name=Log" json:"Log,omitempty"`
}

func (m *StartViewArgs) Reset()                    { *m = StartViewArgs{} }
func (m *StartViewArgs) String() string            { return proto.CompactTextString(m) }
func (*StartViewArgs) ProtoMessage()               {}
func (*StartViewArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *StartViewArgs) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *StartViewArgs) GetLog() []string {
	if m != nil {
		return m.Log
	}
	return nil
}

type StartViewReply struct {
}

func (m *StartViewReply) Reset()                    { *m = StartViewReply{} }
func (m *StartViewReply) String() string            { return proto.CompactTextString(m) }
func (*StartViewReply) ProtoMessage()               {}
func (*StartViewReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type WhoisPrimaryRequest struct {
}

func (m *WhoisPrimaryRequest) Reset()                    { *m = WhoisPrimaryRequest{} }
func (m *WhoisPrimaryRequest) String() string            { return proto.CompactTextString(m) }
func (*WhoisPrimaryRequest) ProtoMessage()               {}
func (*WhoisPrimaryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type WhoIsPrimaryResponse struct {
	Index int32 `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
}

func (m *WhoIsPrimaryResponse) Reset()                    { *m = WhoIsPrimaryResponse{} }
func (m *WhoIsPrimaryResponse) String() string            { return proto.CompactTextString(m) }
func (*WhoIsPrimaryResponse) ProtoMessage()               {}
func (*WhoIsPrimaryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *WhoIsPrimaryResponse) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type HeartBeatRequest struct {
}

func (m *HeartBeatRequest) Reset()                    { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()               {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type HeartBeatResponse struct {
	IsAlive     bool  `protobuf:"varint,1,opt,name=IsAlive" json:"IsAlive,omitempty"`
	CurrentView int32 `protobuf:"varint,2,opt,name=currentView" json:"currentView,omitempty"`
}

func (m *HeartBeatResponse) Reset()                    { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()               {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *HeartBeatResponse) GetIsAlive() bool {
	if m != nil {
		return m.IsAlive
	}
	return false
}

func (m *HeartBeatResponse) GetCurrentView() int32 {
	if m != nil {
		return m.CurrentView
	}
	return 0
}

func init() {
	proto.RegisterType((*User)(nil), "letstalk.User")
	proto.RegisterType((*Talk)(nil), "letstalk.Talk")
	proto.RegisterType((*SignupRequest)(nil), "letstalk.SignupRequest")
	proto.RegisterType((*SignupReply)(nil), "letstalk.SignupReply")
	proto.RegisterType((*LoginRequest)(nil), "letstalk.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "letstalk.LoginReply")
	proto.RegisterType((*LogoutRequest)(nil), "letstalk.LogoutRequest")
	proto.RegisterType((*LogoutReply)(nil), "letstalk.LogoutReply")
	proto.RegisterType((*CancelRequest)(nil), "letstalk.CancelRequest")
	proto.RegisterType((*CancelReply)(nil), "letstalk.CancelReply")
	proto.RegisterType((*FollowRequest)(nil), "letstalk.FollowRequest")
	proto.RegisterType((*FollowReply)(nil), "letstalk.FollowReply")
	proto.RegisterType((*FollowUserRequest)(nil), "letstalk.FollowUserRequest")
	proto.RegisterType((*FollowUserReply)(nil), "letstalk.FollowUserReply")
	proto.RegisterType((*UnfollowUserRequest)(nil), "letstalk.UnfollowUserRequest")
	proto.RegisterType((*UnfollowUserReply)(nil), "letstalk.UnfollowUserReply")
	proto.RegisterType((*TalkRequest)(nil), "letstalk.TalkRequest")
	proto.RegisterType((*TalkReply)(nil), "letstalk.TalkReply")
	proto.RegisterType((*GetUsers)(nil), "letstalk.GetUsers")
	proto.RegisterType((*GetTalks)(nil), "letstalk.GetTalks")
	proto.RegisterType((*Node)(nil), "letstalk.Node")
	proto.RegisterType((*JoinReply)(nil), "letstalk.JoinReply")
	proto.RegisterType((*PrepareArgs)(nil), "letstalk.PrepareArgs")
	proto.RegisterType((*PrepareReply)(nil), "letstalk.PrepareReply")
	proto.RegisterType((*RecoveryArgs)(nil), "letstalk.RecoveryArgs")
	proto.RegisterType((*RecoveryReply)(nil), "letstalk.RecoveryReply")
	proto.RegisterType((*UserData)(nil), "letstalk.UserData")
	proto.RegisterType((*ViewChangeArgs)(nil), "letstalk.ViewChangeArgs")
	proto.RegisterType((*ViewChangeReply)(nil), "letstalk.ViewChangeReply")
	proto.RegisterType((*StartViewArgs)(nil), "letstalk.StartViewArgs")
	proto.RegisterType((*StartViewReply)(nil), "letstalk.StartViewReply")
	proto.RegisterType((*WhoisPrimaryRequest)(nil), "letstalk.WhoisPrimaryRequest")
	proto.RegisterType((*WhoIsPrimaryResponse)(nil), "letstalk.WhoIsPrimaryResponse")
	proto.RegisterType((*HeartBeatRequest)(nil), "letstalk.HeartBeatRequest")
	proto.RegisterType((*HeartBeatResponse)(nil), "letstalk.HeartBeatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Letstalk service

type LetstalkClient interface {
	// Sends a signup request
	SendSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupReply, error)
	// Sends a login request
	SendLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// Sends a logout request
	SendLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
	// Sends a cancel request
	SendCancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error)
	// Sends a follow request
	SendFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowReply, error)
	// Sends a talk request
	SendTalk(ctx context.Context, in *TalkRequest, opts ...grpc.CallOption) (*TalkReply, error)
	FollowUsers(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserReply, error)
	UnfollowUsers(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserReply, error)
	JoinSlave(ctx context.Context, in *Node, opts ...grpc.CallOption) (*JoinReply, error)
	WhoIsPrimary(ctx context.Context, in *WhoisPrimaryRequest, opts ...grpc.CallOption) (*WhoIsPrimaryResponse, error)
	HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
	Prepare(ctx context.Context, in *PrepareArgs, opts ...grpc.CallOption) (*PrepareReply, error)
	Recovery(ctx context.Context, in *RecoveryArgs, opts ...grpc.CallOption) (*RecoveryReply, error)
}

type letstalkClient struct {
	cc *grpc.ClientConn
}

func NewLetstalkClient(cc *grpc.ClientConn) LetstalkClient {
	return &letstalkClient{cc}
}

func (c *letstalkClient) SendSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupReply, error) {
	out := new(SignupReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/SendSignup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) SendLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/SendLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) SendLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/SendLogout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) SendCancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error) {
	out := new(CancelReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/SendCancel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) SendFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowReply, error) {
	out := new(FollowReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/SendFollow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) SendTalk(ctx context.Context, in *TalkRequest, opts ...grpc.CallOption) (*TalkReply, error) {
	out := new(TalkReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/SendTalk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) FollowUsers(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserReply, error) {
	out := new(FollowUserReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/FollowUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) UnfollowUsers(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserReply, error) {
	out := new(UnfollowUserReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/UnfollowUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) JoinSlave(ctx context.Context, in *Node, opts ...grpc.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/JoinSlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) WhoIsPrimary(ctx context.Context, in *WhoisPrimaryRequest, opts ...grpc.CallOption) (*WhoIsPrimaryResponse, error) {
	out := new(WhoIsPrimaryResponse)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/WhoIsPrimary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/HeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) Prepare(ctx context.Context, in *PrepareArgs, opts ...grpc.CallOption) (*PrepareReply, error) {
	out := new(PrepareReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/Prepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letstalkClient) Recovery(ctx context.Context, in *RecoveryArgs, opts ...grpc.CallOption) (*RecoveryReply, error) {
	out := new(RecoveryReply)
	err := grpc.Invoke(ctx, "/letstalk.Letstalk/Recovery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Letstalk service

type LetstalkServer interface {
	// Sends a signup request
	SendSignup(context.Context, *SignupRequest) (*SignupReply, error)
	// Sends a login request
	SendLogin(context.Context, *LoginRequest) (*LoginReply, error)
	// Sends a logout request
	SendLogout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// Sends a cancel request
	SendCancel(context.Context, *CancelRequest) (*CancelReply, error)
	// Sends a follow request
	SendFollow(context.Context, *FollowRequest) (*FollowReply, error)
	// Sends a talk request
	SendTalk(context.Context, *TalkRequest) (*TalkReply, error)
	FollowUsers(context.Context, *FollowUserRequest) (*FollowUserReply, error)
	UnfollowUsers(context.Context, *UnfollowUserRequest) (*UnfollowUserReply, error)
	JoinSlave(context.Context, *Node) (*JoinReply, error)
	WhoIsPrimary(context.Context, *WhoisPrimaryRequest) (*WhoIsPrimaryResponse, error)
	HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
	Prepare(context.Context, *PrepareArgs) (*PrepareReply, error)
	Recovery(context.Context, *RecoveryArgs) (*RecoveryReply, error)
}

func RegisterLetstalkServer(s *grpc.Server, srv LetstalkServer) {
	s.RegisterService(&_Letstalk_serviceDesc, srv)
}

func _Letstalk_SendSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).SendSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/SendSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).SendSignup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_SendLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).SendLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/SendLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).SendLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_SendLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).SendLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/SendLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).SendLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_SendCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).SendCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/SendCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).SendCancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_SendFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).SendFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/SendFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).SendFollow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_SendTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TalkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).SendTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/SendTalk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).SendTalk(ctx, req.(*TalkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_FollowUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).FollowUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/FollowUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).FollowUsers(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_UnfollowUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).UnfollowUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/UnfollowUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).UnfollowUsers(ctx, req.(*UnfollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_JoinSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).JoinSlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/JoinSlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).JoinSlave(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_WhoIsPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoisPrimaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).WhoIsPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/WhoIsPrimary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).WhoIsPrimary(ctx, req.(*WhoisPrimaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).HeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).Prepare(ctx, req.(*PrepareArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Letstalk_Recovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetstalkServer).Recovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/letstalk.Letstalk/Recovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetstalkServer).Recovery(ctx, req.(*RecoveryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Letstalk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "letstalk.Letstalk",
	HandlerType: (*LetstalkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSignup",
			Handler:    _Letstalk_SendSignup_Handler,
		},
		{
			MethodName: "SendLogin",
			Handler:    _Letstalk_SendLogin_Handler,
		},
		{
			MethodName: "SendLogout",
			Handler:    _Letstalk_SendLogout_Handler,
		},
		{
			MethodName: "SendCancel",
			Handler:    _Letstalk_SendCancel_Handler,
		},
		{
			MethodName: "SendFollow",
			Handler:    _Letstalk_SendFollow_Handler,
		},
		{
			MethodName: "SendTalk",
			Handler:    _Letstalk_SendTalk_Handler,
		},
		{
			MethodName: "FollowUsers",
			Handler:    _Letstalk_FollowUsers_Handler,
		},
		{
			MethodName: "UnfollowUsers",
			Handler:    _Letstalk_UnfollowUsers_Handler,
		},
		{
			MethodName: "JoinSlave",
			Handler:    _Letstalk_JoinSlave_Handler,
		},
		{
			MethodName: "WhoIsPrimary",
			Handler:    _Letstalk_WhoIsPrimary_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _Letstalk_HeartBeat_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Letstalk_Prepare_Handler,
		},
		{
			MethodName: "Recovery",
			Handler:    _Letstalk_Recovery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1050 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xe9, 0x6e, 0x1b, 0x37,
	0x10, 0xd6, 0x69, 0xaf, 0x46, 0x96, 0x62, 0xd3, 0x47, 0xd4, 0x4d, 0x5b, 0x04, 0x44, 0x92, 0xf6,
	0x47, 0x60, 0xa0, 0x0e, 0x0a, 0x14, 0xe9, 0x01, 0x38, 0xb6, 0xe3, 0xaa, 0x51, 0x13, 0x77, 0x15,
	0x37, 0xbf, 0x59, 0x89, 0x91, 0x17, 0x59, 0x2d, 0x55, 0x92, 0xb2, 0xeb, 0x17, 0xe8, 0x9b, 0xf4,
	0xc1, 0xfa, 0x26, 0x05, 0xaf, 0x5d, 0xae, 0x56, 0x52, 0x83, 0x24, 0xff, 0x76, 0x66, 0x38, 0x33,
	0xdf, 0x70, 0x0e, 0xce, 0x02, 0xcc, 0x05, 0xe5, 0x87, 0x33, 0xce, 0x24, 0x43, 0x41, 0x42, 0xa5,
	0x90, 0x24, 0x79, 0x87, 0x25, 0x34, 0x2e, 0x05, 0xe5, 0x68, 0x0f, 0x9a, 0x74, 0x4a, 0xe2, 0xa4,
	0x57, 0xbd, 0x5f, 0xfd, 0xba, 0x15, 0x19, 0x02, 0x7d, 0x0e, 0xad, 0x19, 0x11, 0xe2, 0x86, 0xf1,
	0xf1, 0x37, 0xbd, 0x9a, 0x96, 0xe4, 0x0c, 0x25, 0x7d, 0x1b, 0x73, 0x21, 0x53, 0x32, 0xa5, 0xbd,
	0xba, 0x91, 0x66, 0x0c, 0x14, 0x42, 0x90, 0x10, 0x2b, 0x6c, 0x68, 0x61, 0x46, 0xe3, 0x53, 0x68,
	0xbc, 0x26, 0xc9, 0xbb, 0x15, 0x5e, 0x11, 0x34, 0x14, 0x36, 0xeb, 0x50, 0x7f, 0x2b, 0xde, 0x98,
	0x48, 0xe7, 0x46, 0x7f, 0xe3, 0x27, 0xd0, 0x19, 0xc6, 0x93, 0x74, 0x3e, 0x8b, 0xe8, 0x9f, 0x73,
	0x2a, 0x24, 0xc2, 0xd0, 0x50, 0x41, 0x6a, 0x6b, 0xed, 0xa3, 0xee, 0xa1, 0x8b, 0xf2, 0x50, 0x85,
	0x18, 0x69, 0x19, 0x3e, 0x83, 0xb6, 0x53, 0x9a, 0x25, 0xb7, 0xa8, 0x07, 0x9b, 0x53, 0x2a, 0x04,
	0x99, 0x50, 0x8b, 0xc1, 0x91, 0x2a, 0x3a, 0x41, 0x85, 0x88, 0x59, 0x1a, 0x8f, 0x5d, 0xec, 0x19,
	0x03, 0x3f, 0x83, 0xad, 0x01, 0x9b, 0xc4, 0xa9, 0x73, 0xfd, 0x01, 0xf7, 0x87, 0x4f, 0x01, 0xac,
	0x8d, 0xf7, 0x45, 0xd2, 0x5f, 0x44, 0xd2, 0x1f, 0xe3, 0x87, 0xd0, 0x19, 0xb0, 0x09, 0x9b, 0xcb,
	0xb5, 0x50, 0xf0, 0x57, 0xd0, 0x76, 0xc7, 0xd6, 0x7a, 0x53, 0xf6, 0x4e, 0x48, 0x3a, 0xa2, 0xc9,
	0x7a, 0x7b, 0x2f, 0xa0, 0xed, 0x8e, 0xad, 0x47, 0x8f, 0xb3, 0x6c, 0xd6, 0x8b, 0x49, 0x51, 0x15,
	0x60, 0xb2, 0x8b, 0x8f, 0xa1, 0xf3, 0x9c, 0x25, 0x09, 0xbb, 0x71, 0x3e, 0x43, 0x08, 0x54, 0xb6,
	0x74, 0xf1, 0x18, 0x7b, 0x19, 0x9d, 0xe3, 0x51, 0x16, 0x33, 0x3c, 0x27, 0xd0, 0x76, 0x26, 0xd6,
	0xe3, 0xb1, 0xa6, 0x93, 0x58, 0x48, 0x6b, 0x21, 0xa3, 0xf1, 0x19, 0xec, 0x18, 0x23, 0xba, 0x60,
	0x3e, 0x18, 0xcb, 0x6f, 0x70, 0xc7, 0x37, 0xa3, 0xf0, 0xac, 0x33, 0xf2, 0x3e, 0x37, 0x74, 0x0e,
	0xbb, 0x97, 0xe9, 0xdb, 0x4f, 0x80, 0x6d, 0x08, 0x3b, 0x45, 0x43, 0x9f, 0x02, 0xdd, 0x0b, 0x68,
	0x6b, 0x2a, 0xef, 0x43, 0xad, 0x52, 0xea, 0xc3, 0x5c, 0xc5, 0x4f, 0x50, 0xad, 0x58, 0x80, 0x7d,
	0x68, 0x19, 0x63, 0x1f, 0x5f, 0x57, 0x87, 0x10, 0x9c, 0x53, 0xa9, 0xe2, 0x14, 0xde, 0x70, 0xa8,
	0xaf, 0x1c, 0x0e, 0xe6, 0xbc, 0x32, 0x20, 0xbc, 0x20, 0x56, 0xdb, 0xff, 0xbb, 0x0a, 0x8d, 0x97,
	0x6c, 0x4c, 0x51, 0x17, 0x6a, 0xf1, 0x58, 0x23, 0x6c, 0x46, 0xb5, 0x78, 0xac, 0xc6, 0xd5, 0x8c,
	0x71, 0xa9, 0x43, 0x6b, 0x46, 0xfa, 0x1b, 0xdd, 0x87, 0xf6, 0x68, 0xce, 0x39, 0x4d, 0xe5, 0xef,
	0x31, 0xbd, 0xd1, 0x93, 0xac, 0x19, 0xf9, 0x2c, 0x7d, 0x82, 0x4d, 0xa7, 0xb1, 0xec, 0xa7, 0x63,
	0xfa, 0x97, 0x9e, 0x9a, 0xea, 0x44, 0xce, 0x42, 0x07, 0xb0, 0x21, 0x24, 0x91, 0x73, 0xd1, 0x6b,
	0x6a, 0xa1, 0xa5, 0xf0, 0x43, 0x68, 0xfd, 0xc2, 0xfe, 0x77, 0x92, 0x60, 0x01, 0xed, 0x0b, 0x4e,
	0x67, 0x84, 0xd3, 0x63, 0x3e, 0x11, 0x0a, 0xa5, 0x86, 0x62, 0x70, 0xeb, 0x6f, 0xf4, 0x00, 0x3a,
	0x17, 0x3c, 0x9e, 0x12, 0x7e, 0x7b, 0xa2, 0xfd, 0xda, 0x10, 0x8a, 0x4c, 0x55, 0x5b, 0x06, 0xa3,
	0x89, 0xc2, 0x10, 0x8a, 0x7b, 0x96, 0x4a, 0x7e, 0x6b, 0xe7, 0xbd, 0x21, 0xf0, 0x0f, 0xb0, 0x65,
	0x9d, 0x1a, 0x78, 0xcb, 0xbc, 0xf6, 0x60, 0x73, 0x38, 0x1f, 0x8d, 0xa8, 0x10, 0xda, 0x5f, 0x10,
	0x39, 0x12, 0x3f, 0x85, 0xad, 0x88, 0x8e, 0xd8, 0x35, 0xe5, 0xb7, 0x2b, 0x31, 0x1f, 0xc0, 0xc6,
	0x90, 0xf2, 0x6b, 0xca, 0x2d, 0x58, 0x4b, 0xe1, 0x7f, 0xaa, 0xd0, 0x71, 0xca, 0x6b, 0x7d, 0x2b,
	0xa0, 0x31, 0x15, 0xb6, 0x53, 0x1c, 0x59, 0xbe, 0x8b, 0xfa, 0xb2, 0xbb, 0xf0, 0xb0, 0x37, 0x0a,
	0xd8, 0xd1, 0x23, 0x68, 0x9c, 0x12, 0x49, 0x7a, 0x4d, 0x5d, 0x42, 0xa8, 0x58, 0x72, 0x4a, 0x12,
	0x69, 0x39, 0x9e, 0x41, 0xe0, 0x38, 0xaa, 0x15, 0x2f, 0x17, 0x5a, 0xd1, 0xd1, 0x4a, 0x76, 0x61,
	0x5f, 0x0f, 0xdb, 0x34, 0x19, 0x8d, 0x1e, 0x43, 0xeb, 0xf5, 0x0d, 0xa5, 0x72, 0xa0, 0xe6, 0x5a,
	0x7d, 0x69, 0xcd, 0xe6, 0x07, 0xf0, 0x03, 0xe8, 0xaa, 0xd8, 0x4f, 0xae, 0x48, 0x3a, 0x59, 0x59,
	0x0b, 0x98, 0xc2, 0x9d, 0xfc, 0x94, 0xb9, 0xc0, 0x47, 0xd0, 0x1d, 0x10, 0x21, 0x5f, 0x32, 0x3e,
	0x25, 0x89, 0xa7, 0xb0, 0xc0, 0x45, 0xdb, 0x50, 0x1f, 0xb0, 0x89, 0xbd, 0x50, 0xf5, 0xe9, 0x5f,
	0x53, 0xbd, 0x98, 0xe2, 0x6f, 0xa1, 0x33, 0x94, 0x84, 0xeb, 0x1e, 0x58, 0x99, 0xe3, 0x92, 0x41,
	0xbc, 0x0d, 0xdd, 0x4c, 0x4d, 0x83, 0xc3, 0xfb, 0xb0, 0xfb, 0xe6, 0x8a, 0xc5, 0xc2, 0xe6, 0xc7,
	0x8e, 0x23, 0xfc, 0x18, 0xf6, 0xde, 0x5c, 0xb1, 0x7e, 0xce, 0x16, 0x33, 0x96, 0x0a, 0x9a, 0x17,
	0x71, 0xd5, 0x2b, 0x62, 0x8c, 0x60, 0xfb, 0x67, 0x4a, 0xb8, 0x7c, 0x46, 0x89, 0x7b, 0x52, 0xf1,
	0x2b, 0xd8, 0xf1, 0x78, 0x56, 0xbd, 0x07, 0x9b, 0x7d, 0x71, 0x9c, 0xc4, 0xd7, 0x26, 0x51, 0x41,
	0xe4, 0xc8, 0xc5, 0x4e, 0xaf, 0x95, 0x3a, 0xfd, 0xe8, 0xdf, 0x0d, 0x08, 0x06, 0x36, 0x39, 0xe8,
	0x27, 0x80, 0x21, 0x4d, 0xc7, 0x66, 0x2d, 0x41, 0x77, 0xf3, 0xac, 0x15, 0xb6, 0x9b, 0x70, 0xbf,
	0x2c, 0x50, 0x41, 0x57, 0xd0, 0xf7, 0xd0, 0x52, 0xfa, 0x7a, 0x97, 0x40, 0x07, 0xf9, 0x29, 0x7f,
	0x41, 0x09, 0xf7, 0x4a, 0x7c, 0xa3, 0x6c, 0x9d, 0x9b, 0xdd, 0xc0, 0x77, 0x5e, 0x58, 0x2a, 0x7c,
	0xe7, 0xde, 0x1a, 0x91, 0xeb, 0x9b, 0x5d, 0xc0, 0xd7, 0x2f, 0x2c, 0x11, 0xbe, 0xbe, 0xb7, 0x36,
	0xe4, 0xfa, 0xe6, 0xbd, 0xf4, 0xf5, 0x0b, 0x0b, 0x81, 0xaf, 0xef, 0x3d, 0xf3, 0xb8, 0x82, 0xbe,
	0x83, 0x40, 0xe9, 0xeb, 0x75, 0x72, 0x7f, 0xa1, 0xe0, 0xad, 0xee, 0xee, 0x22, 0xdb, 0x68, 0x9e,
	0xbb, 0x8d, 0xc1, 0xbc, 0x0f, 0xf7, 0x16, 0x3d, 0x78, 0xef, 0x6c, 0xf8, 0xd9, 0x72, 0xa1, 0x31,
	0xf4, 0x2b, 0x74, 0xfc, 0x27, 0x55, 0xa0, 0x2f, 0xbc, 0x4e, 0x2f, 0x3f, 0xda, 0xe1, 0xbd, 0x55,
	0x62, 0x63, 0xee, 0xc8, 0xcc, 0xf2, 0x61, 0x42, 0xae, 0x29, 0xf2, 0x7a, 0x58, 0x3d, 0x34, 0x7e,
	0x2c, 0xd9, 0xc0, 0xc7, 0x15, 0xf4, 0x0a, 0xb6, 0xfc, 0x12, 0xf7, 0x11, 0x2c, 0xe9, 0x88, 0xf0,
	0xcb, 0x82, 0xb8, 0xd4, 0x19, 0xb8, 0x82, 0x9e, 0x43, 0x2b, 0xab, 0x78, 0x14, 0xe6, 0xc7, 0x17,
	0x5b, 0xc3, 0x0f, 0xa6, 0xd4, 0x22, 0xb8, 0x82, 0x9e, 0xc2, 0xa6, 0x1d, 0xfe, 0x7e, 0x76, 0xbc,
	0x47, 0x28, 0x3c, 0x28, 0xb1, 0x5d, 0x50, 0x3f, 0x42, 0xe0, 0xa6, 0xb7, 0x5f, 0xd6, 0xfe, 0x73,
	0x10, 0xde, 0x2d, 0xf3, 0xad, 0xfa, 0x1f, 0x1b, 0xfa, 0x5f, 0xe7, 0xc9, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x27, 0x61, 0xbe, 0x5b, 0xf9, 0x0c, 0x00, 0x00,
}
