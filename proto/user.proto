// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

//option java_multiple_files = true;
//option java_package = "io.grpc.examples.helloworld";
//option java_outer_classname = "HelloWorldProto";

package letstalk;

message User{
  string email = 1;
  string password1 = 2;
  string firstname = 3;
  string lastname = 4;
}

message Talk{
  string email = 1;
  string talk = 2;
  string date = 3;
}

message SignupRequest {
  User user=1;
}
message SignupReply {
  string message = 1;
  string sessionid=2;
}

message LoginRequest {
  string email = 1;
  string password1 = 2;
}
message LoginReply {
  string message = 1;
  string sessionId=2;
}

message LogoutRequest {
  string email = 1;
}
message LogoutReply {
  string message = 1;
}

message CancelRequest {
  string email = 1;
}
message CancelReply {
  string message = 1;
  repeated Talk talk=2;
}

message FollowRequest {
  string username=1;
  repeated string email=2;
}
message FollowReply {
  string message = 1;
  repeated string userlist=2;
}

message FollowUserRequest {
  string username=1;
  repeated string email=2;
}
message FollowUserReply {
  string username=1;
  repeated Talk talk=2;
}
message UnfollowUserRequest {
  string username=1;
  repeated string email=2;
}
message UnfollowUserReply {
  string username=1;
  repeated Talk talk=2;
}
message TalkRequest {
  Talk talk=1;
  string message=2;
}
message TalkReply {
  string message=1;
  repeated Talk talk=2;
}

message GetUsers{
  repeated User user=1;
}

message GetTalks{
  repeated Talk talk=1;
}

message Node{
    int32 id =1;
    int32 port=2;
    int32 currentView=3;
    int32 commitIndex=4;
    int32 status=5;


}

message JoinReply{
    string message=1;
}

message PrepareArgs {
    int32 View = 1;                    // the primary's current view
    int32 PrimaryCommit = 2;          // the primary's commitIndex
    int32 Index = 3;                 // the index position at which the log entry is to be replicated on backups
    string Entry = 4;
}

message PrepareReply  {
    int32 View = 1;                  // the backup's current view
    bool Success = 2;               // whether the Prepare request has been accepted or rejected
}

message RecoveryArgs  {
    int32 View = 1;                     // the view that the backup would like to synchronize with
    int32 Server = 2;                  // the server sending the Recovery RPC (for debugging)
}

message RecoveryReply {
    int32 View = 1;                     // the view of the primary
    repeated string Entries =2;        // the primary's log including entries replicated up to and including the view.
    int32 PrimaryCommit =3;           // the primary's commitIndex
    bool Success =4;                 // whether the Recovery request has been accepted or rejected
    repeated UserData Data = 5;
}

message UserData {
    string Username =1;
    string Password =2;
    repeated Talk TweetList = 3;
    repeated string Follows=4;

}

message ViewChangeArgs {
    int32 View =1;                        // the new view to be changed into
}

message ViewChangeReply  {
    int32 LastNormalView  =1;            // the latest view which had a NORMAL status at the server
    repeated string Log =2;             // the log at the server
    bool Success=3;                    // whether the ViewChange request has been accepted/rejected
}

message StartViewArgs {
    int32 View =1;                        // the new view which has completed view-change
    repeated string Log=2;             // the log associated with the new new
}

message StartViewReply {
}

message WhoisPrimaryRequest {
}

message WhoIsPrimaryResponse {
    int32 Index =1;
}

message HeartBeatRequest {
}

message HeartBeatResponse {
    bool IsAlive = 1;
    int32 currentView = 2;
}

message ServerCommArgs {
}

message ServerCommReply {
}


//The signup request
service Letstalk {
  // Sends a signup request
  rpc SendSignup (SignupRequest) returns (SignupReply) {}

  // Sends a login request
  rpc SendLogin (LoginRequest) returns (LoginReply) {}

  // Sends a logout request
  rpc SendLogout (LogoutRequest) returns (LogoutReply) {}

  // Sends a cancel request
  rpc SendCancel (CancelRequest) returns (CancelReply) {}

  // Sends a follow request
  rpc SendFollow (FollowRequest) returns (FollowReply) {}

  // Sends a talk request
  rpc SendTalk (TalkRequest) returns (TalkReply) {}

  rpc FollowUsers (FollowUserRequest) returns (FollowUserReply) {}

  rpc JoinSlave(Node) returns (JoinReply) {}

  rpc UnfollowUsers (UnfollowUserRequest) returns (UnfollowUserReply) {}
  rpc WhoIsPrimary (WhoisPrimaryRequest) returns (WhoIsPrimaryResponse) {}
  rpc HeartBeat (HeartBeatRequest) returns (HeartBeatResponse) {}
  rpc Prepare (PrepareArgs) returns (PrepareReply) {}
  rpc Recovery (RecoveryArgs) returns (RecoveryReply) {}

}

